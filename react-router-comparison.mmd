%%{init: {'theme': 'base', 'themeVariables': { 'fontSize': '16px'}}}%%

%% Main Data Flow Comparison
sequenceDiagram
    title React Router: Classic vs Data Router (6.5+)
    
    participant Classic
    participant DataRouter
    
    Note over Classic: Classic React Router
    Classic->>Classic: 1. Component mounts
    Classic->>Classic: 2. useEffect runs
    Classic->>Classic: 3. State updates
    Classic->>Classic: 4. Component re-renders
    
    Note over DataRouter: React Router 6.5+ (Data Router)
    DataRouter->>DataRouter: 1. Route matches
    DataRouter->>DataRouter: 2. Loader runs
    DataRouter->>DataRouter: 3. Data is ready
    DataRouter->>DataRouter: 4. Component renders

%% Form Handling Comparison
sequenceDiagram
    title Form Handling: Classic vs Data Router
    
    participant Classic
    participant DataRouter
    
    Note over Classic: Classic Approach
    Classic->>Classic: 1. Form submit
    Classic->>Classic: 2. Prevent default
    Classic->>Classic: 3. Manual fetch
    Classic->>Classic: 4. Handle response
    Classic->>Classic: 5. Update state
    Classic->>Classic: 6. Navigate manually
    
    Note over DataRouter: Data Router Approach
    DataRouter->>DataRouter: 1. Form submit
    DataRouter->>DataRouter: 2. Action runs
    DataRouter->>DataRouter: 3. Automatic navigation
    DataRouter->>DataRouter: 4. Data revalidation

%% Data Loading Flow
sequenceDiagram
    title Data Router: Complete Data Flow
    
    participant User
    participant Router
    participant Loader
    participant DataSource
    participant Component

    User->>Router: Navigate to route
    Router->>Loader: Execute route loader
    Loader->>DataSource: Fetch data (API/DB/etc)
    DataSource-->>Loader: Return data
    Loader-->>Router: Store data in router
    Router->>Component: Render route component
    Component->>Router: useLoaderData()
    Router-->>Component: Return stored data
    Component->>User: Display content

%% Parallel Data Loading
sequenceDiagram
    title Data Router: Parallel Data Loading
    
    participant Router
    participant Loader1
    participant Loader2
    participant DataSource1
    participant DataSource2

    Router->>Loader1: Execute loader 1
    Router->>Loader2: Execute loader 2
    Loader1->>DataSource1: Fetch data 1
    Loader2->>DataSource2: Fetch data 2
    DataSource1-->>Loader1: Return data 1
    DataSource2-->>Loader2: Return data 2
    Loader1-->>Router: Store data 1
    Loader2-->>Router: Store data 2

%% Error Handling Flow
sequenceDiagram
    title Data Router: Error Handling
    
    participant Router
    participant Loader
    participant DataSource
    participant ErrorBoundary

    Router->>Loader: Execute loader
    Loader->>DataSource: Fetch data
    DataSource-->>Loader: Return error
    Loader-->>Router: Throw error
    Router->>ErrorBoundary: Render error boundary
    ErrorBoundary->>User: Show error UI

%% Key Differences
graph TD
    A[React Router 6.5+ Data Router] --> B[Data Loading]
    A --> C[Form Handling]
    A --> D[Error Handling]
    A --> E[Loading States]
    
    B --> B1[Route-level]
    B --> B2[Parallel loading]
    B --> B3[Automatic caching]
    
    C --> C1[Form component]
    C --> C2[Action functions]
    C --> C3[Automatic navigation]
    
    D --> D1[Route-level errors]
    D --> D2[Error boundaries]
    D --> D3[Fallback UI]
    
    E --> E1[useNavigation]
    E --> E2[Loading UI]
    E --> E3[Transition states]

%% Migration Path
graph LR
    A[Classic React Router] -->|Migration| B[Data Router]
    B --> C[Route Definition]
    B --> D[Data Loading]
    B --> E[Form Handling]
    
    C --> C1[createBrowserRouter]
    C --> C2[RouterProvider]
    
    D --> D1[Loader functions]
    D --> D2[useLoaderData]
    
    E --> E1[Form component]
    E --> E2[Action functions] 